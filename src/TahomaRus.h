#pragma once
#include <Adafruit_GFX.h>

// 192 ascii = 1040 = A
// 223 ascii = 1071 = Я
// 224 ascii = 1072 = а
// 255 ascii = 1103 = я


#define SIZE_SPACE	    0
#define SIZE_EXCLAM	    4
#define SIZE_QUOTE	    5
#define SIZE_PAWN	    26
#define SIZE_DOLLAR	    22
#define SIZE_PERCENT	36
#define SIZE_AND	    28
#define SIZE_SQUOTE	    2
#define SIZE_LBRACKET	16
#define SIZE_RBRACKET	16
#define SIZE_STAR	    12
#define SIZE_PLUS	    18
#define SIZE_COMMA	    4
#define SIZE_MINUS	    2
#define SIZE_DOT	    1
#define SIZE_SLASH	    20
#define SIZE_0		    20
#define SIZE_1		    16
#define SIZE_2		    20
#define SIZE_3		    18
#define SIZE_4		    22
#define SIZE_5		    18
#define SIZE_6		    20
#define SIZE_7		    20
#define SIZE_8		    20
#define SIZE_9		    20
#define SIZE_COLON	    3
#define SIZE_SEMICOLON	8
#define SIZE_LOWER	    16
#define SIZE_EQUAL	    9
#define SIZE_GREATER	16
#define SIZE_QUESTION	16
#define SIZE_AT		    39
#define SIZE_A          26
#define SIZE_B          20
#define SIZE_C          22 
#define SIZE_D          22
#define SIZE_E          18
#define SIZE_F          18
#define SIZE_G          24
#define SIZE_H          20
#define SIZE_I          12
#define SIZE_J          16
#define SIZE_K          20
#define SIZE_L          16
#define SIZE_M          24
#define SIZE_N          20
#define SIZE_O          26
#define SIZE_P          20
#define SIZE_Q          33
#define SIZE_R          22
#define SIZE_S          20
#define SIZE_T          24
#define SIZE_U          24
#define SIZE_V          25
#define SIZE_W          38
#define SIZE_X          24
#define SIZE_Y          24
#define SIZE_Z          20
#define SIZE_SQLBRACKET 14
#define SIZE_BACKSLASH  20
#define SIZE_SQRBRACKET 14
#define SIZE_POW        13    
#define SIZE_UNDERLINE  2
#define SIZE_BSQUOTE    2
#define SIZE_a          13
#define SIZE_b          21
#define SIZE_c          13
#define SIZE_d          22
#define SIZE_e          14
#define SIZE_f          15
#define SIZE_g          19
#define SIZE_h          20
#define SIZE_i          4
#define SIZE_j          10
#define SIZE_k          20
#define SIZE_l          9
#define SIZE_m          22
#define SIZE_n          13
#define SIZE_o          14
#define SIZE_p          19
#define SIZE_q          19
#define SIZE_r          10
#define SIZE_s          11
#define SIZE_t          11
#define SIZE_u          13
#define SIZE_v          13
#define SIZE_w          21
#define SIZE_x          13
#define SIZE_y          17
#define SIZE_z          10
#define SIZE_CULBRACKET 21
#define SIZE_OR         6
#define SIZE_CURBRACKET 21
#define SIZE_TILDA      9
//
#define SIZE_BE         20
#define SIZE_GE         18
#define SIZE_DE         31
#define SIZE_JE         38
#define SIZE_ZE         20
#define SIZE_II         20
#define SIZE_YI         22
#define SIZE_EL         24
#define SIZE_PE         20
#define SIZE_UU         24
#define SIZE_FE         28
#define SIZE_TSE        27
#define SIZE_CHE        20
#define SIZE_SHA        32
#define SIZE_SHIA       43
#define SIZE_TZN        28
#define SIZE_III        26
#define SIZE_MZN        20
#define SIZE_EE         24
#define SIZE_IU         34
#define SIZE_IA         22
#define SIZE_be         24
#define SIZE_ve         13
#define SIZE_ge         11
#define SIZE_de         20
#define SIZE_je         21
#define SIZE_ze         13
#define SIZE_ii         13
#define SIZE_yi         20
#define SIZE_ka         13
#define SIZE_el         14
#define SIZE_em         14
#define SIZE_en         13
#define SIZE_pe         13
#define SIZE_te         14
#define SIZE_uu         17
#define SIZE_fe         37
#define SIZE_tse        18
#define SIZE_che        11
#define SIZE_sha        20
#define SIZE_scha       27
#define SIZE_tzn        16
#define SIZE_iii        17
#define SIZE_mzn        13
#define SIZE_ee         13
#define SIZE_iu         20
#define SIZE_ia         13
#define SIZE_IO         22
#define SIZE_io         19

#define ADDR_SPACE	    0
#define ADDR_EXCLAM	    (ADDR_SPACE+SIZE_SPACE)
#define ADDR_QUOTE	    (ADDR_EXCLAM+SIZE_EXCLAM)
#define ADDR_PAWN	    (ADDR_QUOTE+SIZE_QUOTE)
#define ADDR_DOLLAR	    (ADDR_PAWN+SIZE_PAWN)
#define ADDR_PERCENT	(ADDR_DOLLAR+SIZE_DOLLAR)
#define ADDR_AND	    (ADDR_PERCENT+SIZE_PERCENT)
#define ADDR_SQUOTE	    (ADDR_AND+SIZE_AND)
#define ADDR_LBRACKET	(ADDR_SQUOTE+SIZE_SQUOTE)
#define ADDR_RBRACKET	(ADDR_LBRACKET+SIZE_LBRACKET)
#define ADDR_STAR	    (ADDR_RBRACKET+SIZE_RBRACKET)
#define ADDR_PLUS	    (ADDR_STAR+SIZE_STAR)
#define ADDR_COMMA	    (ADDR_PLUS+SIZE_PLUS)
#define ADDR_MINUS	    (ADDR_COMMA+SIZE_COMMA)
#define ADDR_DOT	    (ADDR_MINUS+SIZE_MINUS)
#define ADDR_SLASH	    (ADDR_DOT+SIZE_DOT)
#define ADDR_0		    (ADDR_SLASH+SIZE_SLASH)
#define ADDR_1		    (ADDR_0+SIZE_0)
#define ADDR_2		    (ADDR_1+SIZE_1)
#define ADDR_3		    (ADDR_2+SIZE_2)
#define ADDR_4		    (ADDR_3+SIZE_3)
#define ADDR_5		    (ADDR_4+SIZE_4)
#define ADDR_6		    (ADDR_5+SIZE_5)
#define ADDR_7		    (ADDR_6+SIZE_6)
#define ADDR_8		    (ADDR_7+SIZE_7)
#define ADDR_9		    (ADDR_8+SIZE_8)
#define ADDR_COLON	    (ADDR_9+SIZE_9)
#define ADDR_SEMICOLON	(ADDR_COLON+SIZE_COLON)
#define ADDR_LOWER	    (ADDR_SEMICOLON+SIZE_SEMICOLON)
#define ADDR_EQUAL	    (ADDR_LOWER+SIZE_LOWER)
#define ADDR_GREATER	(ADDR_EQUAL+SIZE_EQUAL)
#define ADDR_QUESTION   (ADDR_GREATER+SIZE_GREATER)
#define ADDR_AT		    (ADDR_QUESTION+SIZE_QUESTION)
#define ADDR_A		    (ADDR_AT+SIZE_AT)
#define ADDR_B		    (ADDR_A+SIZE_A)
#define ADDR_C		    (ADDR_B+SIZE_B)
#define ADDR_D		    (ADDR_C+SIZE_C)
#define ADDR_E		    (ADDR_D+SIZE_D)
#define ADDR_F		    (ADDR_E+SIZE_E)
#define ADDR_G		    (ADDR_F+SIZE_F)
#define ADDR_H		    (ADDR_G+SIZE_G)
#define ADDR_I		    (ADDR_H+SIZE_H)
#define ADDR_J		    (ADDR_I+SIZE_I)
#define ADDR_K		    (ADDR_J+SIZE_J)
#define ADDR_L		    (ADDR_K+SIZE_K)
#define ADDR_M		    (ADDR_L+SIZE_L)
#define ADDR_N		    (ADDR_M+SIZE_M)
#define ADDR_O		    (ADDR_N+SIZE_N)
#define ADDR_P		    (ADDR_O+SIZE_O)
#define ADDR_Q		    (ADDR_P+SIZE_P)
#define ADDR_R		    (ADDR_Q+SIZE_Q)
#define ADDR_S		    (ADDR_R+SIZE_R)
#define ADDR_T		    (ADDR_S+SIZE_S)
#define ADDR_U		    (ADDR_T+SIZE_T)
#define ADDR_V		    (ADDR_U+SIZE_U)
#define ADDR_W		    (ADDR_V+SIZE_V)
#define ADDR_X		    (ADDR_W+SIZE_W)
#define ADDR_Y		    (ADDR_X+SIZE_X)
#define ADDR_Z		    (ADDR_Y+SIZE_Y)
#define ADDR_SQLBRACKET (ADDR_Z+SIZE_Z)
#define ADDR_BACKSLASH  (ADDR_SQLBRACKET+SIZE_SQLBRACKET)
#define ADDR_SQRBRACKET (ADDR_BACKSLASH+SIZE_BACKSLASH)
#define ADDR_POW        (ADDR_SQRBRACKET+SIZE_SQRBRACKET)
#define ADDR_UNDERLINE  (ADDR_POW+SIZE_POW)
#define ADDR_BSQUOTE    (ADDR_UNDERLINE+SIZE_UNDERLINE)
#define ADDR_a		    (ADDR_BSQUOTE+SIZE_BSQUOTE)
#define ADDR_b		    (ADDR_a+SIZE_a)
#define ADDR_c		    (ADDR_b+SIZE_b)
#define ADDR_d		    (ADDR_c+SIZE_c)
#define ADDR_e		    (ADDR_d+SIZE_d)
#define ADDR_f		    (ADDR_e+SIZE_e)
#define ADDR_g		    (ADDR_f+SIZE_f)
#define ADDR_h		    (ADDR_g+SIZE_g)
#define ADDR_i		    (ADDR_h+SIZE_h)
#define ADDR_j		    (ADDR_i+SIZE_i)
#define ADDR_k		    (ADDR_j+SIZE_j)
#define ADDR_l		    (ADDR_k+SIZE_k)
#define ADDR_m		    (ADDR_l+SIZE_l)
#define ADDR_n		    (ADDR_m+SIZE_m)
#define ADDR_o		    (ADDR_n+SIZE_n)
#define ADDR_p		    (ADDR_o+SIZE_o)
#define ADDR_q		    (ADDR_p+SIZE_p)
#define ADDR_r		    (ADDR_q+SIZE_q)
#define ADDR_s		    (ADDR_r+SIZE_r)
#define ADDR_t		    (ADDR_s+SIZE_s)
#define ADDR_u		    (ADDR_t+SIZE_t)
#define ADDR_v		    (ADDR_u+SIZE_u)
#define ADDR_w		    (ADDR_v+SIZE_v)
#define ADDR_x		    (ADDR_w+SIZE_w)
#define ADDR_y		    (ADDR_x+SIZE_x)
#define ADDR_z		    (ADDR_y+SIZE_y)
#define ADDR_CULBRACKET (ADDR_z+SIZE_z)
#define ADDR_OR         (ADDR_CULBRACKET+SIZE_CULBRACKET)
#define ADDR_CURBRACKET (ADDR_OR+SIZE_OR)
#define ADDR_TILDA      (ADDR_CURBRACKET+SIZE_CURBRACKET)
#define ADDR_RECTANGLE  0
#define ADDR_BE         (ADDR_TILDA+SIZE_TILDA)
#define ADDR_GE         (ADDR_BE+SIZE_BE)
#define ADDR_DE         (ADDR_GE+SIZE_GE)
#define ADDR_JE         (ADDR_DE+SIZE_DE)
#define ADDR_ZE         (ADDR_JE+SIZE_JE)
#define ADDR_II         (ADDR_ZE+SIZE_ZE)
#define ADDR_YI         (ADDR_II+SIZE_II)
#define ADDR_EL         (ADDR_YI+SIZE_YI)
#define ADDR_PE         (ADDR_EL+SIZE_EL)
#define ADDR_UU         (ADDR_PE+SIZE_PE)
#define ADDR_FE         (ADDR_UU+SIZE_UU)
#define ADDR_TSE         (ADDR_FE+SIZE_FE)
#define ADDR_CHE         (ADDR_TSE+SIZE_TSE)
#define ADDR_SHA         (ADDR_CHE+SIZE_CHE)
#define ADDR_SHIA         (ADDR_SHA+SIZE_SHA)
#define ADDR_TZN         (ADDR_SHIA+SIZE_SHIA)
#define ADDR_III         (ADDR_TZN+SIZE_TZN)
#define ADDR_MZN         (ADDR_III+SIZE_III)
#define ADDR_EE         (ADDR_MZN+SIZE_MZN)
#define ADDR_IU         (ADDR_EE+SIZE_EE)
#define ADDR_IA         (ADDR_IU+SIZE_IU)

#define ADDR_be         (ADDR_IA+SIZE_IA)
#define ADDR_ve         (ADDR_be+SIZE_be)
#define ADDR_ge         (ADDR_ve+SIZE_ve)
#define ADDR_de         (ADDR_ge+SIZE_ge)
#define ADDR_je         (ADDR_de+SIZE_de)
#define ADDR_ze         (ADDR_je+SIZE_je)
#define ADDR_ii         (ADDR_ze+SIZE_ze)
#define ADDR_yi         (ADDR_ii+SIZE_ii)
#define ADDR_ka         (ADDR_yi+SIZE_yi)
#define ADDR_el         (ADDR_ka+SIZE_ka)
#define ADDR_em         (ADDR_el+SIZE_el)
#define ADDR_en         (ADDR_em+SIZE_em)
#define ADDR_pe         (ADDR_en+SIZE_en)
#define ADDR_te         (ADDR_pe+SIZE_pe)
#define ADDR_uu         (ADDR_te+SIZE_te)
#define ADDR_fe         (ADDR_uu+SIZE_uu)
#define ADDR_tse         (ADDR_fe+SIZE_fe)
#define ADDR_che         (ADDR_tse+SIZE_tse)
#define ADDR_sha         (ADDR_che+SIZE_che)
#define ADDR_scha         (ADDR_sha+SIZE_sha)
#define ADDR_tzn         (ADDR_scha+SIZE_scha)
#define ADDR_iii         (ADDR_tzn+SIZE_tzn)
#define ADDR_mzn         (ADDR_iii+SIZE_iii)
#define ADDR_ee         (ADDR_mzn+SIZE_mzn)
#define ADDR_iu         (ADDR_ee+SIZE_ee)
#define ADDR_ia         (ADDR_iu+SIZE_iu)

#define ADDR_IO         (ADDR_ia+SIZE_ia)
#define ADDR_io         (ADDR_IO+SIZE_IO)


const uint8_t TahomaRusBitmaps[] PROGMEM = {
// Space

// !
0xFF, 0xFF, 0xFF, 0x0F,

// "
0xCF, 0x3C, 0xF3, 0xCF, 0x30,

// #
0x06, 0x60, 0x33, 0x01, 0xB8, 0x19, 0x80, 0xCC, 
0x1F, 0xFC, 0xFF, 0xE1, 0x98, 0x19, 0x80, 0xCC, 
0x3F, 0xF9, 0xFF, 0xC1, 0x98, 0x1D, 0x80, 0xCC, 
0x06, 0x60,

// $
0x08, 0x04, 0x02, 0x07, 0xE7, 0xFE, 0x47, 0x21,
0x90, 0x7E, 0x1F, 0x82, 0xE1, 0x30, 0x9C, 0x5F,
0xFC, 0xFC, 0x08, 0x04, 0x02, 0x00,

// %
0x38, 0x0C, 0x1F, 0x06, 0x0C, 0x61, 0x83, 0x18, 
0xC0, 0xC6, 0x30, 0x31, 0x98, 0x0C, 0x66, 0x01, 
0xF3, 0x1C, 0x38, 0xCF, 0x80, 0x66, 0x30, 0x19, 
0x8C, 0x0C, 0x63, 0x03, 0x18, 0xC1, 0x86, 0x30, 
0x60, 0xF8, 0x30, 0x1C,

// &
0x1E, 0x00, 0xFC, 0x07, 0x38, 0x18, 0x60, 0x61, 
0x81, 0xCC, 0x03, 0xE6, 0x0F, 0x18, 0x6E, 0x63, 
0x1D, 0x8C, 0x3E, 0x30, 0x78, 0xC0, 0xE3, 0x83, 
0xC7, 0xFB, 0x1F, 0x87,

// '
0xFF, 0xF0,

// (
0x1C, 0x63, 0x0C, 0x61, 0x8E, 0x30, 0xC3, 0x0C, 
0x30, 0xC3, 0x0E, 0x18, 0x60, 0xC3, 0x06, 0x1C,

// )
0xE1, 0x83, 0x0C, 0x18, 0x61, 0xC3, 0x0C, 0x30, 
0xC3, 0x0C, 0x31, 0xC6, 0x18, 0xC3, 0x18, 0xE0,

// *
0x0C, 0x23, 0x1E, 0xDC, 0xFC, 0x0C, 0x1F, 0xEC, 
0xCC, 0x30, 0x0C, 0x00,

// +
0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x0F, 
0xFF, 0xFF, 0xF0, 0x60, 0x06, 0x00, 0x60, 0x06, 
0x00, 0x60,

// ,
0x36, 0x66, 0x4C, 0xC0,

// -
0xFF, 0xF0,

// .
0xFC,

// /
0x03, 0x03, 0x06, 0x06, 0x06, 0x0C, 0x0C, 0x0C, 
0x18, 0x18, 0x18, 0x18, 0x30, 0x30, 0x30, 0x60, 
0x60, 0x60, 0xC0, 0xC0,

// 0
0x1E, 0x0F, 0xC6, 0x19, 0x06, 0xC0, 0xF0, 0x3C, 
0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0x61, 
0x98, 0x63, 0xF0, 0x78,

// 1
0x18, 0x18, 0xF8, 0xF8, 0x18, 0x18, 0x18, 0x18, 
0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0xFF,

// 2
0x7E, 0x3F, 0xC8, 0x38, 0x06, 0x01, 0x80, 0x60, 
0x18, 0x0C, 0x06, 0x03, 0x81, 0xC0, 0xE0, 0x70, 
0x30, 0x0F, 0xFF, 0xFF,

// 3
0x7E, 0x7F, 0xA0, 0xE0, 0x30, 0x18, 0x18, 0x78, 
0x3C, 0x03, 0x00, 0xC0, 0x60, 0x30, 0x1C, 0x1B, 
0xFC, 0xF8,

// 4
0x01, 0x80, 0x70, 0x1E, 0x06, 0xC1, 0x98, 0x63, 
0x18, 0x66, 0x0C, 0xFF, 0xFF, 0xFC, 0x06, 0x00, 
0xC0, 0x18, 0x03, 0x00, 0x60, 0x0C,

// 5
0x7F, 0xBF, 0xD8, 0x0C, 0x06, 0x03, 0x01, 0xF8, 
0xFE, 0x03, 0x80, 0xC0, 0x60, 0x30, 0x1A, 0x19, 
0xFC, 0x78,

// 6
0x0F, 0x87, 0xE3, 0x81, 0x80, 0x60, 0x30, 0x0D, 
0xF3, 0xFE, 0xE1, 0xF0, 0x3C, 0x0F, 0x03, 0xE0, 
0xD8, 0x63, 0xF8, 0x78,

// 7
0xFF, 0xFF, 0xF0, 0x0C, 0x06, 0x01, 0x80, 0xC0, 
0x30, 0x18, 0x06, 0x03, 0x00, 0xc0, 0x60, 0x18, 
0x0C, 0x03, 0x01, 0x80,

// 8
0x3F, 0x1F, 0xEE, 0x1F, 0x03, 0xC0, 0xF8, 0x37, 
0x98, 0xF8, 0x37, 0xB0, 0x7C, 0x0F, 0x03, 0xC0, 
0xF8, 0x67, 0xF8, 0x78,

// 9
0x1E, 0x1F, 0xC6, 0x1B, 0x07, 0xC0, 0xF0, 0x3C, 
0x0F, 0x87, 0x7F, 0xCF, 0xB0, 0x0C, 0x06, 0x01, 
0x81, 0xC7, 0xE1, 0xF0,

// :
0xFC, 0x00, 0xFC,

// ;
0x66, 0x60, 0x00, 0x00, 0x36, 0x66, 0x4C, 0xC0,

// <
0x00, 0x20, 0x3C, 0x1F, 0x1F, 0x0F, 0x81, 0x80, 
0x3E, 0x01, 0xF0, 0x07, 0xC0, 0x3C, 0x00, 0x80,

// =
0xFF, 0xFF, 0xFC, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xC0,

// >
0x80, 0x1E, 0x01, 0xF0, 0x07, 0xC0, 0x3E, 0x00, 
0xC0, 0xF8, 0x7C, 0x7C, 0x1E, 0x02, 0x00, 0x00,

// ?
0x7C, 0xFE, 0x87, 0x03, 0x03, 0x03, 0x06, 0x0E, 
0x3C, 0x30, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30,

// @
0x03, 0xF0, 0x07, 0xFE, 0x07, 0x03, 0x86, 0x00, 
0xE6, 0x3F, 0x33, 0x3F, 0x9F, 0x38, 0xC7, 0x98, 
0x63, 0xCC, 0x31, 0xE6, 0x18, 0xF3, 0x0C, 0x79,
0xCE, 0x36, 0x7F, 0xF3, 0x1D, 0xF8, 0xC0, 0x00,
0x78, 0x00, 0x0F, 0xF0, 0x03, 0xF8, 0x00,

// A
0x07, 0x00, 0x38, 0x03, 0x60, 0x1B, 0x00, 0xD8, 
0x0C, 0x60, 0x63, 0x03, 0x18, 0x30, 0x61, 0x83, 
0x0F, 0xF8, 0xFF, 0xE6, 0x03, 0x30, 0x1B, 0x80,
0xF8, 0x03,

// B
0xFE, 0x3F, 0xEC, 0x1B, 0x06, 0xC1, 0xB0, 0xCF,
0xE3, 0xFE, 0xC1, 0xB0, 0x3C, 0x0F, 0x03, 0xC0,
0xF0, 0x6F, 0xFB, 0xF8,

// C
0x0F, 0x87, 0xFC, 0xE1, 0xB0, 0x16, 0x01, 0x80, 
0x30, 0x06, 0x00, 0xC0, 0x18, 0x03, 0x00, 0x70, 
0x06, 0x02, 0xF0, 0xCF, 0xF8, 0x7C,

// D
0xFE, 0x1F, 0xE3, 0x0E, 0x60, 0x6C, 0x0D, 0x80, 
0xF0, 0x1E, 0x03, 0xC0, 0x78, 0x0F, 0x01, 0xE0,
0x6C, 0x0D, 0x87, 0x3F, 0xC7, 0xF0,

// E
0xFF, 0xFF, 0xF0, 0x18, 0x0C, 0x06, 0x03, 0xFD,
0xFE, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03,
0xFF, 0xFF,

// F
0xFF, 0xFF, 0xF0, 0x18, 0x0C, 0x06, 0x03, 0xFF,
0xFF, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03,
0x01, 0x80,

// G
0x0F, 0xC1, 0xFF, 0x38, 0x76, 0x01, 0x60, 0x0C,
0x00, 0xC0, 0x0C, 0x00, 0xC1, 0xFC, 0x1F, 0xC0,
0x36, 0x03, 0x60, 0x33, 0x83, 0x3F, 0xF0, 0xFC,

// H
0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xF0, 0x3F, 
0xFF, 0xFF, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 
0xF0, 0x3C, 0x0F, 0x03,

// I
0xFF, 0xF3, 0x0C, 0x30, 0xC3, 0x0C, 0x30, 0xC3, 
0x0C, 0x30, 0xCF, 0xFF,

// J
0x3F, 0x3F, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 
0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0xFE, 0xFC,

// K
0xC1, 0xF0, 0xEC, 0x73, 0x18, 0xCC, 0x37, 0x0F,
0x83, 0xC0, 0xF8, 0x37, 0x0C, 0xC3, 0x18, 0xC7,
0x30, 0xCC, 0x1B, 0x07,

// L
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 
0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF, 0xFF,

// M
0xE0, 0x7E, 0x07, 0xF0, 0xFF, 0x0F, 0xD0, 0xBD,
0x9B, 0xD9, 0x3C, 0x93, 0xCF, 0x3C, 0x63, 0xC6,
0x3C, 0x63, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03,

// N
0xE0, 0xF8, 0x3F, 0x0F, 0x43, 0xD8, 0xF6, 0x3C,
0x8F, 0x33, 0xC4, 0xF1, 0xBC, 0x6F, 0x0F, 0xC3,
0xF0, 0x7C, 0x1F, 0x07,

// O
0x0F, 0x81, 0xFF, 0x1C, 0x1C, 0xC0, 0x6E, 0x03,
0xE0, 0x0F, 0x00, 0x78, 0x03, 0xC0, 0x1E, 0x00,
0xF0, 0x07, 0xC0, 0x76, 0x03, 0x38, 0x38, 0xFF,
0x81, 0xF0,

// P
0xFE, 0x3F, 0xEC, 0x1B, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x06, 0xFF, 0x3F, 0x8C, 0x03, 0x00, 0xC0,
0x30, 0x0C, 0x03, 0x00,

// Q
0x0F, 0x81, 0xFF, 0x1C, 0x1C, 0xC0, 0x6E, 0x03, 
0xE0, 0x0F, 0x00, 0x78, 0x03, 0xC0, 0x1E, 0x00, 
0xF0, 0x07, 0xC0, 0x76, 0x03, 0x38, 0x38, 0xFF,
0x81, 0xF0, 0x01, 0x80, 0x0E, 0x00, 0x3E, 0x00, 
0xF0,

// R
0xFE, 0x1F, 0xE3, 0x0E, 0x60, 0xCC, 0x19, 0x83,
0x30, 0x66, 0x18, 0xFE, 0x1F, 0x83, 0x38, 0x63,
0x8C, 0x31, 0x83, 0x30, 0x76, 0x07,

// S
0x3F, 0x1F, 0xEE, 0x0B, 0x00, 0xC0, 0x30, 0x0F,
0x01, 0xF8, 0x1F, 0x80, 0x70, 0x0C, 0x03, 0x80,
0xF0, 0x6F, 0xF8, 0xF8,

// T
0xFF, 0xFF, 0xFF, 0x06, 0x00, 0x60, 0x06, 0x00,
0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 
0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60,

// U
0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C,
0x03, 0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xC0,
0x3C, 0x03, 0xE0, 0x77, 0x0E, 0x3F, 0xC1, 0xF8,

// V
0xC0, 0x1B, 0x01, 0x98, 0x0C, 0xC0, 0x63, 0x06,
0x18, 0x30, 0xC1, 0x83, 0x18, 0x18, 0xC0, 0xC6,
0x03, 0x60, 0x1B, 0x00, 0x70, 0x03, 0x80, 0x1C,
0x00,

// W
0xC0, 0xE0, 0x78, 0x1C, 0x0D, 0x83, 0x83, 0x30,
0x50, 0x66, 0x1B, 0x0C, 0xC3, 0x61, 0x8C, 0x6C,
0x61, 0x88, 0x8C, 0x33, 0x19, 0x86, 0x63, 0x30,
0x6C, 0x6C, 0x0D, 0x05, 0x81, 0xA0, 0xF0, 0x3C,
0x1E, 0x03, 0x83, 0x80, 0x60, 0x30,

// X
0xC0, 0x36, 0x06, 0x30, 0xC3, 0x0C, 0x19, 0x81,
0x98, 0x0F, 0x00, 0x60, 0x06, 0x00, 0xF0, 0x19,
0x81, 0x98, 0x30, 0xC3, 0x0C, 0x60, 0x6C, 0x03,

// Y
0xE0, 0x76, 0x06, 0x70, 0xE3, 0x0C, 0x39, 0x81,
0x98, 0x0F, 0x00, 0xF0, 0x06, 0x00, 0x60, 0x03,
0x00, 0x60, 0x06, 0x00, 0x60, 0x06, 0x00, 0x60,

// Z
0xFF, 0xFF, 0xF0, 0x0C, 0x06, 0x03, 0x00, 0xC0,
0x60, 0x30, 0x0C, 0x06, 0x03, 0x00, 0xC0, 0x60,
0x30, 0x0F, 0xFF, 0xFF,

// [
0xFF, 0xF1, 0x8C, 0x63, 0x18, 0xC6, 0x31, 0x8C,
0x63, 0x18, 0xC6, 0x31, 0xFF, 0x80,

// \backslash
0xC0, 0xC0, 0x60, 0x60, 0x60, 0x30, 0x30, 0x30, 
0x18, 0x18, 0x18, 0x18, 0x0C, 0x0C, 0x0C, 0x06,
0x06, 0x06, 0x03, 0x03,

// ]
0xFF, 0xC6, 0x31, 0x8C, 0x63, 0x18, 0xC6, 0x31,
0x8C, 0x63, 0x18, 0xC7, 0xFF, 0x80,

// ^
0x07, 0x00, 0x38, 0x03, 0x60, 0x31, 0x81, 0x8C,
0x18, 0x31, 0x80, 0xD8, 0x03,

// _
0xFF, 0xE0,

// `
0xE6, 0x23,

// a
0x7E, 0x3F, 0x80, 0x60, 0x31, 0xFB, 0xFF, 0x87,
0x83, 0xC3, 0xFF, 0xCF, 0x60,

// b
0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0C,
0xF3, 0xFE, 0xE1, 0xB0, 0x3C, 0x0F, 0x03, 0xC0,
0xF0, 0x3C, 0x1B, 0xFE, 0xDE,

// c
0x1F, 0x3F, 0xD8, 0x38, 0x0C, 0x06, 0x03, 0x01,
0x80, 0x60, 0xBF, 0xC7, 0xC0,

// d
0x00, 0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x31,
0xED, 0xFF, 0x60, 0xF0, 0x3C, 0x0F, 0x03, 0xC0,
0xF0, 0x36, 0x1D, 0xFF, 0x3E, 0xC0,

// e
0x1F, 0x1F, 0xE6, 0x1F, 0x03, 0xFF, 0xFF, 0xFC,
0x03, 0x00, 0x60, 0x5F, 0xF1, 0xF8,

// f
0x1E, 0x7D, 0xC3, 0x06, 0x0C, 0x3F, 0x7E, 0x60,
0xC1, 0x83, 0x06, 0x0C, 0x18, 0x30, 0x60,

// g
0x1E, 0xCF, 0xF6, 0x0F, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x03, 0x61, 0xDF, 0xF3, 0xEC, 0x03, 0x41,
0x9F, 0xE7, 0xE0,

// h
0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x79,
0xFE, 0xE3, 0xE0, 0xF0, 0x78, 0x3C, 0x1E, 0x0F,
0x07, 0x83, 0xC1, 0x80,

// i
0xF0, 0x3F, 0xFF, 0xFF,

// j
0x33, 0x00, 0x0F, 0xF3, 0x33, 0x33, 0x33, 0x33, 
0x33, 0xEC,

// k
0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x0D,
0x8C, 0xCC, 0x6C, 0x3C, 0x1F, 0x0D, 0x86, 0x63,
0x19, 0x8E, 0xC3, 0x80,

// l
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xC0,

// m
0xDE, 0x3C, 0xFF, 0x7E, 0xE3, 0xC7, 0xC1, 0x83,
0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83,
0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83,

// n
0xDE, 0x7F, 0xB8, 0xF8, 0x3C, 0x1E, 0x0F, 0x07,
0x83, 0xC1, 0xE0, 0xF0, 0x60,

// o
0x1E, 0x1F, 0xE6, 0x1B, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x03, 0x61, 0x9F, 0xE1, 0xE0,

// p
0xDF, 0x3F, 0xEE, 0x1B, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x03, 0xC1, 0xBF, 0xEF, 0xE3, 0x00, 0xC0,
0x30, 0x0C, 0x00,

// q
0x1E, 0xDF, 0xF6, 0x0F, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x03, 0x61, 0xDF, 0xF3, 0xEC, 0x03, 0x00,
0xC0, 0x30, 0x0C,

// r
0xCF, 0xFF, 0xF6, 0x0C, 0x18, 0x30, 0x60, 0xC1,
0x83, 0x00,

// s
0x3E, 0x7F, 0xC1, 0xC0, 0xF0, 0x7E, 0x1F, 0x03,
0x83, 0xFE, 0x7C,

// t
0x61, 0x86, 0x3F, 0xFD, 0x86, 0x18, 0x61, 0x86,
0x18, 0x7C, 0xF0,

// u
0xC1, 0xE0, 0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07,
0x83, 0xE3, 0xBF, 0xCF, 0x60,

// v
0xC1, 0xB1, 0x98, 0xCC, 0x63, 0x61, 0xB0, 0xD8,
0x38, 0x1C, 0x0E, 0x02, 0x00,

// w
0xC1, 0x87, 0x87, 0x0D, 0x8E, 0x33, 0x16, 0x66,
0x6C, 0xCC, 0xD9, 0x8D, 0x12, 0x1E, 0x3C, 0x3C,
0x78, 0x30, 0x60, 0x60, 0xC0,

// x
0xC1, 0xB1, 0x8D, 0x86, 0xC1, 0xC0, 0xE0, 0x70,
0x6C, 0x36, 0x31, 0xB0, 0x60,

// y
0xC1, 0xB1, 0x98, 0xCC, 0x63, 0x61, 0xB0, 0xD8,
0x38, 0x1C, 0x0E, 0x06, 0x03, 0x03, 0x81, 0x80,
0xC0,

// z
0xFF, 0xFC, 0x30, 0x61, 0x87, 0x0C, 0x30, 0xE1,
0xFF, 0xF8,

// {
0x07, 0x0F, 0x1C, 0x18, 0x18, 0x18, 0x18, 0x18,
0x18, 0x30, 0xE0, 0xE0, 0x30, 0x18, 0x18, 0x18,
0x18, 0x18, 0x1C, 0x0F, 0x07,

// |
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0,

// }
0xE0, 0xF0, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18,
0x18, 0x0C, 0x07, 0x07, 0x0C, 0x18, 0x18, 0x18,
0x18, 0x18, 0x38, 0xF0, 0xE0,

// ~
0x3C, 0x1B, 0xF0, 0xF9, 0xCF, 0x87, 0xEC, 0x1E, 
0x00,

/////////////////// кирилица /////////////////

// Б
0xFF, 0xBF, 0xEC, 0x03, 0x00, 0xC0, 0x30, 0x0F,
0xF3, 0xFE, 0xC1, 0xF0, 0x3C, 0x0F, 0x03, 0xC0,
0xF0, 0x6F, 0xFB, 0xF8,

// Г
0xFF, 0xFF, 0xF0, 0x18, 0x0C, 0x06, 0x03, 0x01,
0x80, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03,
0x01, 0x80,

// Д
0x0F, 0xF0, 0x7F, 0x83, 0x0C, 0x18, 0x60, 0xC3,
0x06, 0x18, 0x70, 0xC3, 0x06, 0x18, 0x30, 0xC1,
0x86, 0x0C, 0x60, 0x63, 0x03, 0x30, 0x1B, 0xFF,
0xFF, 0xFF, 0xC0, 0x1E, 0x00, 0xF0, 0x06,

// Ж
0xE0, 0xC1, 0xDE, 0x18, 0x78, 0xC3, 0x0C, 0x0c,
0x63, 0x01, 0x8C, 0x60, 0x19, 0x98, 0x03, 0xB3,
0x00, 0x3F, 0xC0, 0x07, 0xFC, 0x01, 0x99, 0x80,
0x63, 0x18, 0x18, 0x61, 0x83, 0x0C, 0x30, 0xC1,
0x83, 0x30, 0x30, 0x34, 0x06, 0x03,

// З
0x3F, 0x1F, 0xE4, 0x1C, 0x03, 0x00, 0xC0, 0x61,
0xF0, 0x7C, 0x01, 0x80, 0x30, 0x0C, 0x03, 0x00,
0xE0, 0x6F, 0xF9, 0xF8,

// И
0xC0, 0xF0, 0x7C, 0x1F, 0x0F, 0xC2, 0xF1, 0xBC,
0x4F, 0x33, 0xCC, 0xF6, 0x3D, 0x8F, 0xC3, 0xF0,
0xF8, 0x3E, 0x0F, 0x03,

// Й
0x33, 0x0C, 0xC1, 0xE3, 0x03, 0xC1, 0xF0, 0x7C,
0x3F, 0x0B, 0xC6, 0xF3, 0x3C, 0xCF, 0x63, 0xD0,
0xFC, 0x3E, 0x0F, 0x83, 0xC0, 0xC0,

// Л
0x1F, 0xF1, 0xFF, 0x18, 0x31, 0x83, 0x18, 0x31,
0x83, 0x18, 0x31, 0x83, 0x18, 0x31, 0x83, 0x38,
0x33, 0x03, 0x30, 0x33, 0x03, 0xE0, 0x3C, 0x03,

// П
0xFF, 0xFF, 0xFC, 0x0F, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x03, 0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0,
0xF0, 0x3C, 0x0F, 0x03,

// У
0xC0, 0x36, 0x06, 0x60, 0x63, 0x0E, 0x30, 0xC3,
0x8C, 0x19, 0x81, 0x98, 0x0D, 0x80, 0xF0, 0x07,
0x00, 0x60, 0x06, 0x00, 0xE0, 0x7C, 0x07, 0x80,

// Ф
0x03, 0x00, 0x0C, 0x01, 0xFE, 0x0F, 0xFC, 0x73,
0x3B, 0x8C, 0x7C, 0x30, 0xF0, 0xC3, 0xC3, 0x0F,
0x0C, 0x3E, 0x31, 0xDC, 0xCE, 0x3F, 0xF0, 0x7F,
0x80, 0x30, 0x00, 0xC0,

// Ц
0xC0, 0xD8, 0x1B, 0x03, 0x60, 0x6C, 0x0D, 0x81,
0xB0, 0x36, 0x06, 0xC0, 0xD8, 0x1B, 0x03, 0x60,
0x6C, 0x0D, 0x81, 0xBF, 0xFF, 0xFF, 0x00, 0x60,
0x0C, 0x01, 0x80,

// Ч
0xC0, 0xF0, 0x3C, 0x0F, 0x03, 0xC0, 0xF0, 0x3C,
0x0F, 0x87, 0x7F, 0xCF, 0xB0, 0x0C, 0x03, 0x00,
0xC0, 0x30, 0x0C, 0x03,

// Ш
0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83,
0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83,
0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83, 0xC1, 0x83,
0xC1, 0x83, 0xC1, 0x83, 0xFF, 0xFF, 0xFF, 0xFF,

// Щ
0xC1, 0x83, 0x30, 0x60, 0xCC, 0x18, 0x33, 0x06,
0x0C, 0xC1, 0x83, 0x30, 0x60, 0xCC, 0x18, 0x33,
0x06, 0x0C, 0xC1, 0x83, 0x30, 0x60, 0xCC, 0x18,
0x33, 0x06, 0x0C, 0xC1, 0x83, 0x30, 0x60, 0xCF,
0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xC0, 0x00,
0x30, 0x00, 0x0C,

// Ъ
0xFC, 0x03, 0xF0, 0x00, 0xC0, 0x03, 0x00, 0x0C,
0x00, 0x30, 0x00, 0xFF, 0x03, 0xFE, 0x0C, 0x1C,
0x30, 0x30, 0xC0, 0xC3, 0x03, 0x0C, 0x0C, 0x30,
0x60, 0xFF, 0x83, 0xF8,

// Ы
0xC0, 0x1E, 0x00, 0xF0, 0x07, 0x80, 0x3C, 0x01,
0xE0, 0x0F, 0xFC, 0x7F, 0xF3, 0xC1, 0xDE, 0x06,
0xF0, 0x37, 0x81, 0xBC, 0x0D, 0xE0, 0xCF, 0xFE,
0x7F, 0xC3,

// Ь
0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0, 0x30, 0x0F,
0xF3, 0xFE, 0xC1, 0xF0, 0x3C, 0x0F, 0x03, 0xC0,
0xF0, 0x6F, 0xFB, 0xF8,

// Э
0x7F, 0x0F, 0xF8, 0x81, 0xC0, 0x0E, 0x00, 0x70,
0x03, 0x00, 0x33, 0xFF, 0x3F, 0xF0, 0x03, 0x00,
0x30, 0x06, 0x00, 0x68, 0x1C, 0xFF, 0x87, 0xF0,

// Ю
0xC0, 0xF8, 0x61, 0xFF, 0x31, 0xC1, 0xD8, 0xC0,
0x6C, 0xE0, 0x3E, 0x60, 0x0F, 0xF0, 0x07, 0xF8,
0x03, 0xCC, 0x01, 0xE6, 0x00, 0xF3, 0x00, 0x78,
0xC0, 0x7C, 0x60, 0x36, 0x18, 0x3B, 0x0F, 0xF9,
0x81, 0xF0,

// Я
0x0F, 0xE3, 0xFC, 0xE1, 0x98, 0x33, 0x06, 0x60,
0xCC, 0x19, 0xC3, 0x1F, 0xE1, 0xFC, 0x39, 0x8E,
0x31, 0x86, 0x60, 0xDC, 0x1F, 0x03,

// б
0x07, 0xC3, 0xF8, 0xE0, 0x30, 0x04, 0x01, 0x9E,
0x3F, 0xF7, 0x06, 0xC0, 0xF8, 0x0F, 0x01, 0xE0,
0x3C, 0x06, 0xC1, 0x9C, 0x71, 0xFC, 0x1F, 0x00,

// в
0xFE, 0x7F, 0xB0, 0xD8, 0x6F, 0xE7, 0xFB, 0x07,
0x83, 0xC3, 0xFF, 0xBF, 0x80,

// г
0xFF, 0xFF, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 
0xC0, 0xC0, 0xC0,

// д
0x1F, 0xC3, 0xF8, 0x63, 0x0C, 0x61, 0x8C, 0x61,
0x8C, 0x31, 0x86, 0x60, 0xDF, 0xFF, 0xFF, 0xE0,
0x3C, 0x07, 0x80, 0xC0,

// ж
0xC3, 0x0F, 0xC6, 0x3C, 0x8C, 0xC1, 0x99, 0x81,
0xB6, 0x03, 0xFC, 0x07, 0xF8, 0x19, 0x98, 0x63,
0x19, 0x86, 0x1A, 0x0C, 0x18,

// з
0x3E, 0x3F, 0xD0, 0x60, 0x31, 0xF0, 0xF8, 0x06,
0x03, 0x83, 0xFF, 0x9F, 0x80,

// и
0xC1, 0xE1, 0xF0, 0xF8, 0xFC, 0xDE, 0x4F, 0x67, 
0xE3, 0xE1, 0xF0, 0xF0, 0x60,

// й
0x63, 0x31, 0x8D, 0x83, 0x80, 0x00, 0x03, 0x07,
0x87, 0xC3, 0xE3, 0xF3, 0x79, 0x3D, 0x9F, 0x8F,
0x87, 0xC3, 0xC1, 0x80,

// к
0xC7, 0x67, 0xB3, 0x19, 0x8D, 0xC7, 0xC3, 0xE1,
0x98, 0xC6, 0x61, 0xB0, 0x60,

// л
0x1F, 0xC7, 0xF1, 0x8C, 0x63, 0x18, 0xC6, 0x31,
0x8C, 0xE3, 0x30, 0xFC, 0x3E, 0x0C,

// м
0xE1, 0xF8, 0x7F, 0x1F, 0xCF, 0xD2, 0xF7, 0xBC,
0xCF, 0x33, 0xC0, 0xF0, 0x3C, 0x0C,

// н
0xC1, 0xE0, 0xF0, 0x78, 0x3F, 0xFF, 0xFF, 0x07,
0x83, 0xC1, 0xE0, 0xF0, 0x60,

// п
0xFF, 0xFF, 0xF0, 0x78, 0x3C, 0x1E, 0x0F, 0x07,
0x83, 0xC1, 0xE0, 0xF0, 0x60,

// т
0xFF, 0xFF, 0xF0, 0xC0, 0x30, 0x0C, 0x03, 0x00,
0xC0, 0x30, 0x0C, 0x03, 0x00, 0xC0,

// у
0xC0, 0xB1, 0x98, 0xCC, 0x63, 0x61, 0xB0, 0xD8,
0x38, 0x1C, 0x0E, 0x06, 0x03, 0x03, 0x81, 0x80,
0xC0,

// ф
0x03, 0x00, 0x0C, 0x00, 0x30, 0x00, 0xC0, 0x03,
0x00, 0x0C, 0x03, 0xFF, 0x1F, 0xFE, 0x63, 0x1F,
0x0C, 0x3C, 0x30, 0xF0, 0xC3, 0xC3, 0x0F, 0x0C,
0x3E, 0x31, 0x9F, 0xFE, 0x3F, 0xF0, 0x0C, 0x00,
0x30, 0x00, 0xC0, 0x03, 0x00,

// ц
0xC1, 0xB0, 0x6C, 0x1B, 0x06, 0xC1, 0xB0, 0x6C,
0x1B, 0x06, 0xC1, 0xBF, 0xFF, 0xFC, 0x03, 0x00,
0xC0, 0x30,

// ч
0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFF, 0x7F, 0x03,
0x03, 0x03, 0x03,

// ш
0xC3, 0x0F, 0x0C, 0x3C, 0x30, 0xF0, 0xC3, 0xC3,
0x0F, 0x0C, 0x3C, 0x30, 0xF0, 0xC3, 0xC3, 0x0F,
0xFF, 0xFF, 0xFF, 0xC0,

// щ
0xC3, 0x0D, 0x86, 0x1B, 0x0C, 0x36, 0x18, 0x6C,
0x30, 0xD8, 0x61, 0xB0, 0xC3, 0x61, 0x86, 0xC3,
0x0D, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x30, 0x00,
0x60, 0x00, 0xC0,

// ъ
0xF8, 0x1F, 0x00, 0x60, 0x0C, 0x01, 0xFC, 0x3F,
0xC6, 0x18, 0xC3, 0x18, 0x63, 0xF8, 0x7E, 0x00,

// ы
0xC0, 0x3C, 0x03, 0xC0, 0x3C, 0x03, 0xFE, 0x3F,
0xF3, 0xC1, 0xBC, 0x1B, 0xC3, 0xBF, 0xF3, 0xFE,
0x30,

// ь
0xC0, 0x60, 0x30, 0x18, 0x0F, 0xE7, 0xFB, 0x07,
0x83, 0xC3, 0xFF, 0xBF, 0x80,

// э
0x7C, 0x7F, 0xA0, 0xC0, 0x33, 0xF9, 0xFC, 0x06,
0x03, 0x83, 0x7F, 0x1F, 0x00,

// ю
0xC3, 0xE3, 0x1F, 0xEC, 0xE1, 0xB3, 0x03, 0xFC,
0x0F, 0xF0, 0x3C, 0xC0, 0xF3, 0x03, 0xC6, 0x1B,
0x1F, 0xEC, 0x1E, 0x00,

// я
0x1F, 0x9F, 0xD8, 0x6C, 0x36, 0x19, 0xFC, 0x7E,
0x33, 0x31, 0xB0, 0xF0, 0x60,

// Ё
0x33, 0x19, 0x80, 0x1F, 0xFF, 0xFE, 0x03, 0x01,
0x80, 0xC0, 0x7F, 0xBF, 0xD8, 0x0C, 0x06, 0x03,
0x01, 0x80, 0xC0, 0x7F, 0xFF, 0xE0,

// ё
0x33, 0x0C, 0xC0, 0x00, 0x00, 0x1F, 0x1F, 0xE6,
0x1F, 0x03, 0xFF, 0xFF, 0xFC, 0x03, 0x00, 0x60,
0x5F, 0xF1, 0xF8,

};

const GFXglyph TahomaRusGlyphs[] PROGMEM = {
    {ADDR_SPACE,0,0,10,0,0},        // 32 - Space
    {ADDR_EXCLAM,2,16,10,2,1},      // 33 - !
    {ADDR_QUOTE,6,6,10,2,0},        // 34 - "
    {ADDR_PAWN,13,16,15,1,1},       // 35 - #
    {ADDR_DOLLAR,9,19,11,1,1},      // 36 - $
    {ADDR_PERCENT,18,16,20,1,1},    // 37 - %
    {ADDR_AND,14,16,16,1,1},        // 38 - &
    {ADDR_SQUOTE,2,6,6,2,0},        // 39 - '
    {ADDR_LBRACKET,6,21,9,1,0},     // 40 - (
    {ADDR_RBRACKET,6,21,10,1,0},    // 41 - )
    {ADDR_STAR,10,9,12,1,4},        // 42 - *
    {ADDR_PLUS,12,12,16,2,4},       // 43 - +
    {ADDR_COMMA,4,7,6,1,14},        // 44 - ,
    {ADDR_MINUS,6,2,8,1,9},         // 45 - -
    {ADDR_DOT,2,3,6,2,14},          // 46 - .
    {ADDR_SLASH,8,20,10,0,0},       // 47 - /
    {ADDR_0,10,16,11,0,1},          // 48 - 0
    {ADDR_1,8,16,12,2,1},           // 49 - 1
    {ADDR_2,10,16,12,0,1},          // 50 - 2
    {ADDR_3,9,16,11,1,1},           // 51 - 3
    {ADDR_4,11,16,12,0,1},          // 52 - 4
    {ADDR_5,9,16,12,1,1},           // 53 - 5
    {ADDR_6,10,16,11,0,1},          // 54 - 6
    {ADDR_7,10,16,12,1,1},          // 55 - 7
    {ADDR_8,10,16,12,0,1},          // 56 - 8
    {ADDR_9,10,16,12,0,1},          // 57 - 9
    {ADDR_COLON,2,11,6,2,6},        // 58 - :
    {ADDR_SEMICOLON,4,15,6,1,6},    // 59 - ;
    {ADDR_LOWER,11,11,15,2,5},      // 60 - <
    {ADDR_EQUAL,11,6,15,2,7},       // 61 - =
    {ADDR_GREATER,11,11,15,2,5},    // 62 - >
    {ADDR_QUESTION,8,16,10,1,1},    // 63 - ?
    {ADDR_AT,17,18,19,1,1},         // 64 - @

    {ADDR_A,13,16,15,1,1},          // 65 - A
    {ADDR_B,10,16,14,2,1},          // 66 - B
    {ADDR_C,11,16,13,1,1},          // 67 - C
    {ADDR_D,11,16,15,2,1},          // 68 - D
    {ADDR_E,9,16,13,2,1},           // 69 - E
    {ADDR_F,9,16,13,2,1},           // 70 - F
    {ADDR_G,12,16,14,1,1},          // 71 - G
    {ADDR_H,10,16,14,2,1},          // 72 - H
    {ADDR_I,6,16,8,1,1},            // 73 - I
    {ADDR_J,8,16,11,1,1},           // 74 - J
    {ADDR_K,10,16,13,2,1},          // 75 - K
    {ADDR_L,8,16,11,2,1},           // 76 - L
    {ADDR_M,12,16,16,2,1},          // 77 - M
    {ADDR_N,10,16,14,2,1},          // 78 - N
    {ADDR_O,13,16,15,1,1},          // 79 - O
    {ADDR_P,10,16,13,2,1},          // 80 - P
    {ADDR_Q,13,20,15,1,1},          // 81 - Q
    {ADDR_R,11,16,14,2,1},          // 82 - R
    {ADDR_S,10,16,12,1,1},          // 83 - S
    {ADDR_T,12,16,14,1,1},          // 84 - T
    {ADDR_U,12,16,14,1,1},          // 85 - U
    {ADDR_V,13,16,15,1,1},          // 86 - V
    {ADDR_W,19,16,21,1,1},          // 87 - W
    {ADDR_X,12,16,14,1,1},          // 88 - X
    {ADDR_Y,12,16,14,1,1},          // 89 - Y
    {ADDR_Z,10,16,12,1,1} ,         // 90 - Z
    {ADDR_SQLBRACKET,5,21,8,2,0},   // 91 - [
    {ADDR_BACKSLASH,8,20,10,1,0},   // 92 - \ backslash
    {ADDR_SQRBRACKET,5,21,8,1,0},   // 93 - ]
    {ADDR_POW,13,8,15,1,1},         // 94 - ^
    {ADDR_UNDERLINE,11,1,11,0,20},  // 95 - _
    {ADDR_BSQUOTE,4,4,10,3,0},      // 96 - `
    {ADDR_a,9,11,11,0,6},           // 97 - a
    {ADDR_b,10,17,12,1,0},          // 98 - b
    {ADDR_c,9,11,11,0,6},           // 99 - c
    {ADDR_d,10,17,12,0,0},          // 100 - d
    {ADDR_e,10,11,11,0,6},          // 101 - e
    {ADDR_f,7,17,9,1,0},            // 102 - f
    {ADDR_g,10,15,12,0,6},          // 103 - g
    {ADDR_h,9,17,11,1,0},           // 104 - h
    {ADDR_i,2,16,4,1,1},            // 105 - i
    {ADDR_j,4,20,6,1,1},            // 106 - j
    {ADDR_k,9,17,11,1,0},           // 107 - k
    {ADDR_l,2,17,4,1,0},            // 108 - l
    {ADDR_m,16,11,18,1,6},          // 109 - m
    {ADDR_n,9,11,11,1,6},           // 110 - n
    {ADDR_o,10,11,11,0,6},          // 111 - o
    {ADDR_p,10,15,12,1,6},          // 112 - p
    {ADDR_q,10,15,11,0,6},          // 113 - q
    {ADDR_r,7,11,9,1,6},            // 114 - r
    {ADDR_s,8,11,9,0,6},            // 115 - s
    {ADDR_t,6,14,8,1,3},            // 116 - t
    {ADDR_u,9,11,11,1,6},           // 117 - u
    {ADDR_v,9,11,10,0,6},           // 118 - v
    {ADDR_w,15,11,16,0,6},          // 119 - w
    {ADDR_x,9,11,10,0,6},           // 120 - x
    {ADDR_y,9,15,10,0,6},           // 121 - y
    {ADDR_z,7,11,9,1,6},            // 122 - z
    {ADDR_CULBRACKET,8,21,10,1,0},  // 123 - {
    {ADDR_OR,2,21,8,3,0},           // 124 - |
    {ADDR_CURBRACKET,8,21,10,1,0},  // 125 - }
    {ADDR_TILDA,13,5,15,1,8},       // 126 - ~
    {ADDR_RECTANGLE,0,0,10,0,0},    // 127 - []
// 128
    {ADDR_SPACE,0,0,10,0,0},    // 128 -
    {ADDR_SPACE,0,0,10,0,0},    // 129 -
    {ADDR_SPACE,0,0,10,0,0},    // 130 -
    {ADDR_SPACE,0,0,10,0,0},    // 131 -
    {ADDR_SPACE,0,0,10,0,0},    // 132 -
    {ADDR_SPACE,0,0,10,0,0},    // 133 -
    {ADDR_SPACE,0,0,10,0,0},    // 134 -
    {ADDR_SPACE,0,0,10,0,0},    // 135 -
    {ADDR_SPACE,0,0,10,0,0},    // 136 -
    {ADDR_SPACE,0,0,10,0,0},    // 137 -
    {ADDR_SPACE,0,0,10,0,0},    // 138 -
    {ADDR_SPACE,0,0,10,0,0},    // 139 -
    {ADDR_SPACE,0,0,10,0,0},    // 140 -
    {ADDR_SPACE,0,0,10,0,0},    // 141 -
    {ADDR_SPACE,0,0,10,0,0},    // 142 -
    {ADDR_SPACE,0,0,10,0,0},    // 143 -
    {ADDR_SPACE,0,0,10,0,0},    // 144 -
    {ADDR_SPACE,0,0,10,0,0},    // 145 -
    {ADDR_SPACE,0,0,10,0,0},    // 146 -
    {ADDR_SPACE,0,0,10,0,0},    // 147 -
    {ADDR_SPACE,0,0,10,0,0},    // 148 -
    {ADDR_SPACE,0,0,10,0,0},    // 149 -
    {ADDR_SPACE,0,0,10,0,0},    // 150 -
    {ADDR_SPACE,0,0,10,0,0},    // 151 -
    {ADDR_SPACE,0,0,10,0,0},    // 152 -
    {ADDR_SPACE,0,0,10,0,0},    // 153 -
    {ADDR_SPACE,0,0,10,0,0},    // 154 -
    {ADDR_SPACE,0,0,10,0,0},    // 155 -
    {ADDR_SPACE,0,0,10,0,0},    // 156 -
    {ADDR_SPACE,0,0,10,0,0},    // 157 -
    {ADDR_SPACE,0,0,10,0,0},    // 158 -
    {ADDR_SPACE,0,0,10,0,0},    // 159 -
    {ADDR_SPACE,0,0,10,0,0},    // 160 -
    {ADDR_SPACE,0,0,10,0,0},    // 161 -
    {ADDR_SPACE,0,0,10,0,0},    // 162 -
    {ADDR_SPACE,0,0,10,0,0},    // 163 -
    {ADDR_SPACE,0,0,10,0,0},    // 164 -
    {ADDR_SPACE,0,0,10,0,0},    // 165 -
    {ADDR_SPACE,0,0,10,0,0},    // 166 -
    {ADDR_SPACE,0,0,10,0,0},    // 167 -
    {ADDR_IO,9,19,12,2,-2},    // 168 - Ë
    {ADDR_SPACE,0,0,10,0,0},    // 169 -
    {ADDR_SPACE,0,0,10,0,0},    // 170 -
    {ADDR_SPACE,0,0,10,0,0},    // 171 -
    {ADDR_SPACE,0,0,10,0,0},    // 172 -
    {ADDR_SPACE,0,0,10,0,0},    // 173 -
    {ADDR_SPACE,0,0,10,0,0},    // 174 -
    {ADDR_SPACE,0,0,10,0,0},    // 175 -
    {ADDR_SPACE,0,0,10,0,0},    // 176 -
    {ADDR_SPACE,0,0,10,0,0},    // 177 -
    {ADDR_SPACE,0,0,10,0,0},    // 178 -
    {ADDR_SPACE,0,0,10,0,0},    // 179 -
    {ADDR_SPACE,0,0,10,0,0},    // 180 -
    {ADDR_SPACE,0,0,10,0,0},    // 181 -
    {ADDR_SPACE,0,0,10,0,0},    // 182 -
    {ADDR_SPACE,0,0,10,0,0},    // 183 -
    {ADDR_io,10,15,11,0,2},    // 184 - ё
    {ADDR_SPACE,0,0,10,0,0},    // 185 -
    {ADDR_SPACE,0,0,10,0,0},    // 186 -
    {ADDR_SPACE,0,0,10,0,0},    // 187 -
    {ADDR_SPACE,0,0,10,0,0},    // 188 -
    {ADDR_SPACE,0,0,10,0,0},    // 189 -
    {ADDR_SPACE,0,0,10,0,0},    // 190 -
    {ADDR_SPACE,0,0,10,0,0},    // 191 -
    {ADDR_A,13,16,15,1,1},      // 192 - A 
    {ADDR_BE,10,16,13,2,1},    // 193 - Б
    {ADDR_B,10,16,14,2,1},    // 194 - В
    {ADDR_GE,9,16,12,2,1},    // 195 - Г
    {ADDR_DE,13,19,15,0,1},    // 196 - Д
    {ADDR_E,9,16,13,2,1},    // 197 - Е
    {ADDR_JE,19,16,20,0,1},    // 198 - Ж
    {ADDR_ZE,10,16,11,0,1},    // 199 - З
    {ADDR_II,10,16,14,2,1},    // 200 - И
    {ADDR_YI,10,17,14,2,0},    // 201 - Й
    {ADDR_K,10,16,13,2,1},    // 202 - К
    {ADDR_EL,12,16,14,0,1},    // 203 - Л
    {ADDR_M,12,16,16,2,1},    // 204 - М
    {ADDR_H,10,16,14,2,1},    // 205 - Н
    {ADDR_O,13,16,15,1,1},    // 206 - О
    {ADDR_PE,10,16,14,2,1},    // 207 - П
    {ADDR_P,10,16,13,2,1},    // 208 - Р
    {ADDR_C,11,16,13,1,1},    // 209 - С
    {ADDR_T,12,16,14,1,1},    // 210 - Т
    {ADDR_UU,12,16,13,0,1},    // 211 - У
    {ADDR_FE,14,16,16,1,1},    // 212 - Ф
    {ADDR_X,12,16,14,1,1},    // 213 - Х
    {ADDR_TSE,11,19,14,2,1},    // 214 - Ц
    {ADDR_CHE,10,16,13,1,1},    // 215 - Ч
    {ADDR_SHA,16,16,20,2,1},    // 216 - Ш
    {ADDR_SHIA,18,19,21,2,1},    // 217 - Щ
    {ADDR_TZN,14,16,15,0,1},    // 218 - Ъ
    {ADDR_III,13,16,17,2,1},    // 219 - Ы
    {ADDR_MZN,10,16,13,2,1},    // 220 - Ь
    {ADDR_EE,12,16,13,0,1},    // 221 - Э
    {ADDR_IU,17,16,20,2,1},    // 222 - Ю
    {ADDR_IA,11,16,114,0,1},    // 223 - Я
    {ADDR_a,9,11,11,0,6},    // 224 - а
    {ADDR_be,11,17,13,0,0},    // 225 - б
    {ADDR_ve,9,11,11,1,6},    // 226 - в
    {ADDR_ge,8,11,10,1,6},    // 227 - г
    {ADDR_de,11,14,12,0,6},    // 228 - д
    {ADDR_e,10,11,11,0,6},     // 229 - е
    {ADDR_je,15,11,16,0,6},    // 230 - ж
    {ADDR_ze,9,11,10,0,6},    // 231 - з
    {ADDR_ii,9,11,11,1,6},    // 232 - и
    {ADDR_yi,9,17,11,1,0},    // 233 - й
    {ADDR_ka,9,11,11,1,6},    // 234 - к
    {ADDR_el,10,11,11,0,6},    // 235 - л
    {ADDR_em,10,11,12,1,6},    // 236 - м
    {ADDR_en,9,11,11,1,6},    // 237 - н
    {ADDR_o,10,11,11,0,6},    // 238 - о
    {ADDR_pe,9,11,11,1,6},    // 239 - п
    {ADDR_p,10,15,12,1,6},    // 240 - р
    {ADDR_c,9,11,11,0,6},    // 241 - с
    {ADDR_te,10,11,11,0,6},    // 242 - т
    {ADDR_uu,9,15,10,0,6},    // 243 - у
    {ADDR_fe,14,21,16,1,0},    // 244 - ф
    {ADDR_x,9,11,10,0,6},    // 245 - х
    {ADDR_tse,10,14,12,1,6},    // 246 - ц
    {ADDR_che,8,11,10,1,6},    // 247 - ч
    {ADDR_sha,14,11,16,1,6},    // 248 - ш
    {ADDR_scha,15,14,17,1,6},    // 249 - щ
    {ADDR_tzn,11,11,12,0,6},    // 250 - ъ
    {ADDR_iii,12,11,14,1,6},    // 251 - ы
    {ADDR_mzn,9,11,11,1,6},    // 252 - ь
    {ADDR_ee,9,11,10,0,6},    // 253 - э
    {ADDR_iu,14,11,16,1,6},    // 254 - ю
    {ADDR_ia,9,11,11,0,6},    // 255 - я
};

const GFXfont TahomaRus PROGMEM = { (uint8_t *)TahomaRusBitmaps,
                                    (GFXglyph *)TahomaRusGlyphs, 
                                    32, 255, 24};


